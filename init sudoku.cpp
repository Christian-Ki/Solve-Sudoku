
#include "init sudoku.h"
void Werte_an_s_uebergeben(int a[9][9]) {
    int i, j =0;
    for (i=0; i<=8; i++) {
        for (j=0; j<=8;j++) {
            s[i][j] = a[i][j];
        }
    }
}
void init_sudoku(int c_argument){
   
    switch (c_argument) {
        case 1:
        {
            int a[9][9] = {
                {2,1,0,0,7,0,0,0,0},            //SUDOKU 1
                {0,7,0,0,0,0,0,0,5},
                {0,0,0,0,0,0,0,0,9},
                {0,0,9,5,0,4,0,0,0},
                {0,0,0,0,0,0,1,7,0},             //17-Zahlen sudoku
                {0,0,3,0,0,0,0,0,0},             //NICHT GELÖST (17 auf 30)
                {0,0,4,0,0,3,0,0,0},
                {0,8,0,0,0,0,0,2,0},
                {0,0,0,0,0,9,0,0,0},
            };
            Werte_an_s_uebergeben(a);
        }
        break;
        
        case 2:
        {
            int b[9][9] = {
                {0,3,0,0,0,0,9,0,6},
                {5,4,6,0,7,0,3,0,0},
                {0,2,0,6,8,0,0,5,0},            //SENIORENsudoku
                {0,0,1,0,4,7,0,0,0},            //GELÖST
                {0,9,2,1,0,0,4,0,0},
                {0,0,0,5,0,0,2,3,1},
                {6,7,0,0,5,2,0,0,0},
                {0,0,5,0,0,9,0,4,7},
                {9,0,0,7,0,4,0,2,0},
            };
            Werte_an_s_uebergeben(b);
        }
        break;
            
        case 3:
        {
            int c[9][9] = {
                {0,1,0,9,0,0,8,0,0},
                {0,0,0,0,0,8,0,0,4},
                {6,0,5,0,0,0,7,0,0},
                {0,9,0,0,6,0,0,0,8},
                {0,0,0,2,0,7,0,0,0},            //Mittelschwer
                {8,0,0,0,3,0,0,6,0},            //GELÖST
                {0,0,2,0,0,0,5,0,3},
                {1,0,0,4,0,0,0,0,0},
                {0,0,6,0,0,2,0,1,0},
            };
            Werte_an_s_uebergeben(c);
        }
        break;
            
        case 4:
        {
            int d[9][9] = {
                {0,9,1,0,0,0,3,2,0},
                {2,0,3,0,0,0,4,0,8},
                {5,4,0,0,3,0,0,1,9},           //www.lokalpresse.de/files/shop/8klein.jpg
                {0,0,0,4,7,6,0,0,0},           //GELÖST
                {0,0,2,1,0,3,5,0,0},
                {0,0,0,2,5,8,0,0,0},
                {1,2,0,0,4,0,0,3,5},
                {8,0,5,0,0,0,9,0,1},
                {0,3,4,0,0,0,2,7,0},
            };
            Werte_an_s_uebergeben(d);
        }
        break;
            
        case 5:
        {
           int e[9][9] = {
               {0,2,0,0,0,0,0,4,3},
               {0,5,0,3,0,7,6,0,0},
               {0,0,6,0,2,0,0,0,0},
               {0,0,3,0,4,8,0,9,0},
               {0,0,0,0,6,0,0,0,0},            //www.sudoku-raetsel.net/online/sudoku-schwer
               {0,9,0,1,5,0,2,0,0},            //NOCH NICHT GELÖST (von 27 auf 34)
               {0,0,0,0,1,0,3,0,0},            //Jetzt 35
               {0,0,8,5,0,6,0,1,0},
               {7,1,0,0,0,0,0,5,0},
           };
            Werte_an_s_uebergeben(e);
        }
        break;
            
        case 6:
        {
            int f[9][9] = {
                {3,9,0,0,2,0,0,0,0},
                {0,0,0,0,0,0,9,0,6},
                {2,0,0,5,9,0,0,0,0},
                {0,0,3,9,0,0,0,0,0},
                {7,0,4,8,0,0,0,0,0},            //sudoku.tagesspiegel.de/sudoku-schwer/
                {0,0,0,0,0,0,7,5,4},            //GELÖST
                {0,0,0,0,8,0,0,1,0},
                {0,1,2,0,0,7,8,0,0},
                {0,4,8,0,0,1,0,0,3},
            };
            Werte_an_s_uebergeben(f);

        }
        break;
            
        case 7:
        {
            int g[9][9] = {
                {0,0,0,0,6,9,0,0,3},
                {6,0,0,0,8,0,0,7,0},
                {7,4,0,3,0,0,0,8,0},
                {0,0,8,6,0,0,5,0,0},
                {4,3,0,0,0,0,0,0,0},            //Zeit
                {0,0,6,4,0,0,2,0,0},            //GELÖST
                {9,1,0,5,0,0,0,6,0},
                {2,0,0,0,9,0,0,5,0},
                {0,0,0,0,7,6,0,0,4},
            };
            Werte_an_s_uebergeben(g);
        }
        break;
            
        case 8:
        {
            int h[9][9] = {
                {9,0,0,7,0,4,0,0,0},
                {0,3,0,0,0,0,0,0,7},
                {2,4,0,5,1,3,0,0,0},
                {0,7,9,0,0,0,0,0,4},
                {0,0,0,0,0,0,0,0,0},            //www.sudoku-knacker.de/sehr_schwierig.htm
                {3,0,0,0,0,0,6,1,0},            //NICHT GELÖsT (26 auf 43)
                {0,0,0,1,9,8,0,4,6},
                {6,0,0,0,0,0,0,5,0},
                {0,0,0,3,0,6,0,0,9},
            };
            Werte_an_s_uebergeben(h);
        }
        break;
            
        case 9:
        {
            int i[9][9] = {
                {6,0,0,0,0,3,0,0,7},
                {1,4,8,0,0,0,0,0,0},
                {0,3,0,2,1,0,0,0,0},
                {0,0,0,0,0,1,0,6,0},
                {0,0,6,0,7,0,9,0,0},            //echtes sudoku
                {0,8,0,3,0,0,0,0,0},            //25 auf 32
                {0,0,0,0,5,4,0,8,0},
                {0,0,0,0,0,0,6,3,5},
                {7,0,0,8,0,0,0,0,2},
            };
            Werte_an_s_uebergeben(i);
        }
        break;
            
        case 10:
        {
            int j[9][9] = {
                {0,0,0,0,0,4,0,6,0},
                {0,0,0,0,0,0,0,0,0},
                {0,0,7,1,9,3,0,5,4},
                {0,7,0,0,1,0,0,0,6},
                {8,0,0,3,0,9,0,0,2},            //Derstandard.at sehr schwierig!
                {1,0,0,0,4,0,0,3,0},
                {5,2,0,9,3,6,4,0,0},
                {0,0,0,0,0,0,0,0,0},
                {0,9,0,5,0,0,0,0,0},
            };
            Werte_an_s_uebergeben(j);
        }
        break;
            
        case 11:
        {
            int k[9][9] = {
                {0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0},            //LEERES Sudoku
                {0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0},
            };
            Werte_an_s_uebergeben(k);
        }
        break;
        
        default:
        {
            std::cout << "Bitte eine gültige Zahl angeben\n";
            exit(1);
        }
        break;
     
    }
}